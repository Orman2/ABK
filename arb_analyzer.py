import ccxt
import time
import threading
import logging
from typing import Dict, List, Optional
import os
import itertools  # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä –±–∏—Ä–∂

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
# –ö –Ω–µ–º—É –±—É–¥–µ—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è Flask –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è UI.
GLOBAL_ARB_DATA: Dict[str, List[Dict]] = {
    'latest_spreads': []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–æ–∫
}

# –°–ø–∏—Å–æ–∫ –±–∏—Ä–∂, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º (–¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –≤–∞—à–∏–º–∏ API)
SUPPORTED_EXCHANGES = [
    'mexc', 'lbank', 'binance', 'bybit', 'kucoin', 'gateio', 'bingx'
]
# –°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_SYMBOLS = ['BTC/USDT', 'ETH/USDT', 'MEME/USDT', 'RWA/USDT']


# –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å, –∫–∞–∫–∏–µ –ø–∞—Ä—ã —è–≤–ª—è—é—Ç—Å—è —Ñ—å—é—á–µ—Ä—Å–∞–º–∏ ('ETH/USDT:USDT')

class ArbAnalyzer(threading.Thread):
    def __init__(self, update_interval: int = 3):
        super().__init__()
        self.daemon = True
        self.update_interval = update_interval
        self.exchanges = self._initialize_exchanges()
        logging.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –±–∏—Ä–∂–∏: {list(self.exchanges.keys())}")

    def _initialize_exchanges(self) -> Dict[str, ccxt.Exchange]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç—ã CCXT –¥–ª—è –±–∏—Ä–∂, –≥–¥–µ –¥–æ—Å—Ç—É–ø–Ω—ã API –∫–ª—é—á–∏."""
        instances = {}
        for ex_id in SUPPORTED_EXCHANGES:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ API-–∫–ª—é—á–∏ –¥–æ–ª–∂–Ω—ã –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ (–µ—Å–ª–∏ –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)
            try:
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API-–∫–ª—é—á–µ–π (–∑–∞–ø–æ–ª–Ω–∏—Ç–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –∏–Ω–∞—á–µ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø)
                api_key = os.getenv(f"{ex_id.upper()}_API_KEY")
                secret = os.getenv(f"{ex_id.upper()}_SECRET")

                exchange = getattr(ccxt, ex_id)({
                    'apiKey': api_key,
                    'secret': secret,
                    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                })
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ—å—é—á–µ—Ä—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã
                if exchange.has['fetchFundingRate']:
                    instances[ex_id] = exchange
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å {ex_id}: {e}")
        return instances

    def _calculate_spread(self,
                          symbol: str,
                          ex_long_id: str,
                          ex_short_id: str) -> Optional[Dict]:
        """
        –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ä–∞—Å—á–µ—Ç —á–∏—Å—Ç–æ–≥–æ —Å–ø—Ä–µ–¥–∞ –º–µ–∂–¥—É –¥–≤—É–º—è –±–∏—Ä–∂–∞–º–∏.
        (–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑ –≤–∞—à–µ–≥–æ –¢–ó)
        """

        # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (Bid/Ask) –∏–∑ –∫—ç—à–∞.
        # *–í–ù–ò–ú–ê–ù–ò–ï: –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ –º—ã –ø–æ–∫–∞ –ø—Ä–æ–ø—É—Å—Ç–∏–º —Ñ–∞–∑—É –∫—ç—à–∞ –∏ —Å–¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é.*

        ex_long = self.exchanges.get(ex_long_id)
        ex_short = self.exchanges.get(ex_short_id)
        if not ex_long or not ex_short:
            return None

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥—É –æ—Ä–¥–µ—Ä–æ–≤ (Bid/Ask)
            orderbook_long = ex_long.fetch_order_book(symbol)
            orderbook_short = ex_short.fetch_order_book(symbol)

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–≤–∫—É —Ñ–∞–Ω–¥–∏–Ω–≥–∞
            funding_long = ex_long.fetch_funding_rate(symbol)['fundingRate']
            funding_short = ex_short.fetch_funding_rate(symbol)['fundingRate']

            # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º Long/Short (–≥–¥–µ Bid –Ω–∏–∂–µ - —Ç–∞–º Long, –≥–¥–µ Ask –≤—ã—à–µ - —Ç–∞–º Short)
            # –ú—ã —É–ø—Ä–æ—Å—Ç–∏–º –∏ —Å–∫–∞–∂–µ–º, —á—Ç–æ Long - —ç—Ç–æ ex_long, Short - —ç—Ç–æ ex_short
            bid_long = orderbook_long['bids'][0][0]  # –õ—É—á—à–∞—è —Ü–µ–Ω–∞ Bid –Ω–∞ Long-–±–∏—Ä–∂–µ
            ask_short = orderbook_short['asks'][0][0]  # –õ—É—á—à–∞—è —Ü–µ–Ω–∞ Ask –Ω–∞ Short-–±–∏—Ä–∂–µ

            # 3. –†–∞—Å—á–µ—Ç –≥—Ä—É–±–æ–≥–æ —Å–ø—Ä–µ–¥–∞ (%)
            if bid_long <= 0 or ask_short <= 0: return None

            gross_spread_abs = ask_short - bid_long
            gross_spread_pct = (gross_spread_abs / bid_long) * 100

            # 4. –í–´–ß–ï–¢ –ö–û–ú–ò–°–°–ò–ô –ò –§–ê–ù–î–ò–ù–ì–ê (–ú–µ—Å—Ç–æ –¥–ª—è –≤–∞—à–µ–π —Å–ª–æ–∂–Ω–æ–π —Ñ–æ—Ä–º—É–ª—ã!)
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∞—à–∏ –∫–æ–º–∏—Å—Å–∏–∏. –í–æ–∑—å–º–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ 0.04% –Ω–∞ —Å–¥–µ–ª–∫—É (Taker)
            commission_rate = 0.0004
            total_commission = commission_rate * 2 * 100  # –∑–∞ –æ–±–µ —Å–¥–µ–ª–∫–∏ –≤ %

            funding_difference = funding_short - funding_long  # –†–∞–∑–Ω–∏—Ü–∞ —Ñ–∞–Ω–¥–∏–Ω–≥–∞

            # –ü—Ä–∏–º–µ—Ä —á–∏—Å—Ç–æ–≥–æ —Å–ø—Ä–µ–¥–∞:
            net_spread_pct = gross_spread_pct - total_commission + (funding_difference * 100)

            # 5. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è UI
            return {
                'coin': symbol.split('/')[0],
                'long_exchange': ex_long_id.upper(),
                'short_exchange': ex_short_id.upper(),
                'bid_long': bid_long,
                'ask_short': ask_short,
                'gross_spread': round(gross_spread_pct, 4),
                'net_spread': round(net_spread_pct, 4),
                'funding_long': round(funding_long * 100, 4),
                'funding_short': round(funding_short * 100, 4),
                'status': 'üü¢ –ê–∫—Ç—É–∞–ª—å–Ω–æ' if net_spread_pct >= 0.5 else 'üü° –ù–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ',
                # –£—Å–ª–æ–≤–Ω–æ, –µ—Å–ª–∏ > 0.5% —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏
                # ... –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è —Ñ–∞–Ω–¥–∏–Ω–≥–∞, –æ–±—ä–µ–º –∏ —Ç.–¥.
            }

        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ API –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–∞—Ä—ã
            logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–≤—è–∑–∫–∏ {symbol} ({ex_long_id}/{ex_short_id}): {e}")
            return None

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö."""
        while True:
            start_time = time.time()
            all_actual_spreads = []

            # –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –≤—Å–µ–º –º–æ–Ω–µ—Ç–∞–º –∏ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–º –ø–∞—Ä–∞–º –±–∏—Ä–∂
            for symbol in DEFAULT_SYMBOLS:
                # itertools.combinations('mexc', 'lbank') -> [('mexc', 'lbank')]
                for ex_long_id, ex_short_id in itertools.combinations(self.exchanges.keys(), 2):

                    # –†–∞—Å—á–µ—Ç –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã (Long/Short)
                    for long_id, short_id in [(ex_long_id, ex_short_id), (ex_short_id, ex_long_id)]:
                        result = self._calculate_spread(symbol, long_id, short_id)

                        if result and result['net_spread'] > 0.01:  # –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Å–µ, —á—Ç–æ –Ω–µ –ø—Ä–∏–Ω–æ—Å–∏—Ç –ø—Ä–∏–±—ã–ª—å
                            all_actual_spreads.append(result)

            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ–±—Ä–∞—Ç–∏—Ç—Å—è Flask
            GLOBAL_ARB_DATA['latest_spreads'] = all_actual_spreads
            logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {len(all_actual_spreads)} —Å–≤—è–∑–æ–∫. –í—Ä–µ–º—è: {time.time() - start_time:.2f}s")

            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            time_to_wait = self.update_interval - (time.time() - start_time)
            if time_to_wait > 0:
                time.sleep(time_to_wait)