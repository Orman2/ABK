import ccxt
import time
import threading
import logging
import os
import itertools
from typing import Dict, List, Optional, Any

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
GLOBAL_ARB_DATA: Dict[str, List[Dict]] = {
    'latest_spreads': []
}

# –°–ø–∏—Å–æ–∫ –±–∏—Ä–∂, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º
SUPPORTED_EXCHANGES = [
    'mexc', 'lbank', 'binance', 'bybit', 'kucoin', 'gateio', 'bingx'
]
DEFAULT_SYMBOLS = ['BTC/USDT', 'ETH/USDT', 'MEME/USDT', 'RWA/USDT']


class ArbAnalyzer(threading.Thread):
    SUPPORTED_EXCHANGES = [ex.upper() for ex in SUPPORTED_EXCHANGES]  # –î–ª—è API

    def __init__(self, update_interval: int = 3):
        super().__init__()
        self.daemon = True
        self.update_interval = update_interval
        self._stop_event = threading.Event()
        self.exchanges = self._initialize_exchanges()
        logging.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –±–∏—Ä–∂–∏: {list(self.exchanges.keys())}")

    def _initialize_exchanges(self) -> Dict[str, ccxt.Exchange]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç—ã CCXT."""
        instances = {}
        for ex_id in SUPPORTED_EXCHANGES:
            try:
                # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ API-–∫–ª—é—á–∏ –¥–æ–ª–∂–Ω—ã –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
                # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ CCXT –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                exchange = getattr(ccxt, ex_id)({})
                if exchange.has['fetchFundingRate']:
                    instances[ex_id] = exchange
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å {ex_id}: {e}")
        return instances

    def _calculate_spread(self,
                          symbol: str,
                          ex_long_id: str,
                          ex_short_id: str) -> Optional[Dict[str, Any]]:
        """
        –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ä–∞—Å—á–µ—Ç —á–∏—Å—Ç–æ–≥–æ —Å–ø—Ä–µ–¥–∞.
        """
        ex_long = self.exchanges.get(ex_long_id)
        ex_short = self.exchanges.get(ex_short_id)
        if not ex_long or not ex_short:
            return None

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥—É –æ—Ä–¥–µ—Ä–æ–≤ (Bid/Ask)
            orderbook_long = ex_long.fetch_order_book(symbol)
            orderbook_short = ex_short.fetch_order_book(symbol)

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–≤–∫—É —Ñ–∞–Ω–¥–∏–Ω–≥–∞
            funding_long = ex_long.fetch_funding_rate(symbol)['fundingRate']
            funding_short = ex_short.fetch_funding_rate(symbol)['fundingRate']

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Long/Short: Long - —Ç–∞–º, –≥–¥–µ Bid –Ω–∏–∂–µ; Short - —Ç–∞–º, –≥–¥–µ Ask –≤—ã—à–µ.
            bid_long = orderbook_long['bids'][0][0]
            ask_short = orderbook_short['asks'][0][0]

            # –†–∞—Å—á–µ—Ç –≥—Ä—É–±–æ–≥–æ —Å–ø—Ä–µ–¥–∞ (%)
            if bid_long <= 0 or ask_short <= 0: return None

            gross_spread_abs = ask_short - bid_long
            gross_spread_pct = (gross_spread_abs / bid_long) * 100

            # –í—ã—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π (0.04% Taker –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞) –∏ —É—á–µ—Ç —Ñ–∞–Ω–¥–∏–Ω–≥–∞
            commission_rate = 0.0004
            total_commission_pct = commission_rate * 2 * 100
            funding_difference = funding_short - funding_long

            # –§–æ—Ä–º—É–ª–∞ —á–∏—Å—Ç–æ–≥–æ —Å–ø—Ä–µ–¥–∞
            net_spread_pct = gross_spread_pct - total_commission_pct + (funding_difference * 100)

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è UI
            return {
                'coin': symbol.split('/')[0],
                'long_exchange': ex_long_id.upper(),
                'short_exchange': ex_short_id.upper(),
                'bid_long': bid_long,
                'ask_short': ask_short,
                'gross_spread': round(gross_spread_pct, 4),
                'net_spread': round(net_spread_pct, 4),
                'funding_long': round(funding_long * 100, 4),
                'funding_short': round(funding_short * 100, 4),
                'status': 'üü¢ –ê–∫—Ç—É–∞–ª—å–Ω–æ' if net_spread_pct >= 0.01 else 'üü° –ù–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ',
            }

        except Exception as e:
            # logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–≤—è–∑–∫–∏ {symbol} ({ex_long_id}/{ex_short_id}): {e}")
            return None

    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫."""
        self._stop_event.set()

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö."""
        while not self._stop_event.is_set():
            start_time = time.time()
            all_actual_spreads = []

            for symbol in DEFAULT_SYMBOLS:
                # –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–º –ø–∞—Ä–∞–º –±–∏—Ä–∂ –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
                exchange_ids = list(self.exchanges.keys())
                for ex_long_id, ex_short_id in itertools.permutations(exchange_ids, 2):

                    result = self._calculate_spread(symbol, ex_long_id, ex_short_id)

                    if result and result['net_spread'] > 0.01:
                        all_actual_spreads.append(result)

            GLOBAL_ARB_DATA['latest_spreads'] = all_actual_spreads
            logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {len(all_actual_spreads)} —Å–≤—è–∑–æ–∫. –í—Ä–µ–º—è: {time.time() - start_time:.2f}s")

            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            time_to_wait = self.update_interval - (time.time() - start_time)
            if time_to_wait > 0:
                time.sleep(time_to_wait)