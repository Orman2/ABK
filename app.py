import os
import threading
import time
import sqlite3
import asyncio
import logging
from typing import Dict, Any, List, Optional
from datetime import datetime
import ccxt
import requests
from fastapi import FastAPI, Request, HTTPException, Depends
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, Update, Message
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, ExtBot
from telegram.constants import ParseMode
from pydantic import BaseModel

# ==================== –ò–ú–ü–û–†–¢ –ù–û–í–´–• –ú–û–î–£–õ–ï–ô ====================
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ arb_analyzer.py –∏ database.py –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
from arb_analyzer import ArbAnalyzer, GLOBAL_ARB_DATA  # –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
from database import get_settings, create_db, save_settings  # –ú–æ–¥—É–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

# =============================================================

# ================= CONFIG (–û–°–¢–ê–í–õ–ï–ù–û –ò–ó –í–ê–®–ï–ì–û –ö–û–î–ê) =================
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ Railway
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "")
PUBLIC_URL = os.environ.get("PUBLIC_URL", "")

if not TELEGRAM_BOT_TOKEN or not PUBLIC_URL:
    # –≠—Ç–∞ –æ—à–∏–±–∫–∞ —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ Railway
    raise RuntimeError("‚ùå Set TELEGRAM_BOT_TOKEN and PUBLIC_URL environment variables!")

WEBHOOK_PATH = f"/webhook/{TELEGRAM_BOT_TOKEN}"
WEBHOOK_URL = PUBLIC_URL.rstrip("/") + WEBHOOK_PATH
WEBAPP_BASE_URL = PUBLIC_URL.rstrip("/") + "/webapp"  # –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è Web App

DB_FILE = "arb_settings.db"
FETCH_INTERVAL = 3.0
PORT = int(os.environ.get('PORT', 8080))

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# ==================== FASTAPI & TELEGRAM INIT ====================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Application Builder
class CustomBot(ExtBot):
    # –î–æ–±–∞–≤—å—Ç–µ –ª—é–±—ã–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–ª–∏ —Å–≤–æ–π—Å—Ç–≤–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    pass


TELE_BOT_APP = (
    Application.builder()
    .token(TELEGRAM_BOT_TOKEN)
    .updater(None)
    .bot_class(CustomBot)
    .build()
)

# –®–∞–±–ª–æ–Ω—ã Jinja2 –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ miniapp.html
templates = Jinja2Templates(directory=".")

# ==================== –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê ====================
# –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
arb_thread: Optional[ArbAnalyzer] = None


# ==================== –°–•–ï–ú–´ –î–ê–ù–ù–´–• –î–õ–Ø API ====================
# Pydantic-—Å—Ö–µ–º–∞ –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App (–ù–∞—Å—Ç—Ä–æ–π–∫–∏)
class SettingsData(BaseModel):
    user_id: int
    exchanges: List[str]
    blacklist: List[str]
    min_spread: float
    min_funding_spread: float


# ==================== TELEGRAM HANDLERS ====================

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not update.message or not update.message.from_user:
        return

    user_id = update.message.from_user.id

    # URL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Web App (miniapp.html)
    webapp_url = f"{WEBAPP_BASE_URL}?user_id={user_id}"

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π Web App (–Ω–∞–∑–≤–∞–Ω–∏–µ "–¢–æ—Ä–≥–æ–≤–ª—è" —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤)
    keyboard = [
        [InlineKeyboardButton("üìä –û—Ç–∫—Ä—ã—Ç—å –ê—Ä–±–∏—Ç—Ä–∞–∂ –†–∞–¥–∞—Ä", web_app=WebAppInfo(url=webapp_url))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π —Ä–∞–¥–∞—Ä.",
        reply_markup=reply_markup
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message:
        await update.message.reply_text(update.message.text)


# ==================== WEB APP (HTML) ENDPOINTS ====================

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–¥–∞—á–∏ miniapp.html
@app.get("/webapp", response_class=HTMLResponse)
async def webapp_html(request: Request):
    # –ü–µ—Ä–µ–¥–∞–µ–º miniapp.html
    return templates.TemplateResponse("miniapp.html", {"request": request})


# ==================== API ENDPOINTS (–î–ª—è JS –≤ Web App) ====================

# 1. API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —Å–≤—è–∑–æ–∫
@app.get("/api/get_arb_data", response_class=JSONResponse)
async def api_get_arb_data(user_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–≤—è–∑–æ–∫ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ñ–∏–ª—å—Ç—Ä—ã)
    settings = get_settings(user_id)

    # 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–≤–µ–∂–∏–µ —Å–≤—è–∑–∫–∏ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
    all_spreads = GLOBAL_ARB_DATA.get('latest_spreads', [])

    # 3. –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    filtered_spreads = []

    for s in all_spreads:
        # –§–∏–ª—å—Ç—Ä –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É —Å–ø—Ä–µ–¥—É
        if s['net_spread'] * 100 < settings['min_spread']:
            continue

        # –§–∏–ª—å—Ç—Ä –ø–æ —á–µ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É –º–æ–Ω–µ—Ç
        if s['coin'] in settings['blacklist']:
            continue

        # –§–∏–ª—å—Ç—Ä –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –±–∏—Ä–∂–∞–º
        if s['long_exchange'] not in settings['exchanges'] and s['short_exchange'] not in settings['exchanges']:
            continue

        filtered_spreads.append(s)

    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞, –Ω–æ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
    return {"spreads": filtered_spreads}


# 2. API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.get("/api/get_user_settings/{user_id}", response_class=JSONResponse)
async def api_get_user_settings(user_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –≤ Web App."""
    settings = get_settings(user_id)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –≤–∫–ª—é—á–∞—è —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –±–∏—Ä–∂ –¥–ª—è UI
    return JSONResponse({
        "settings": settings,
        "supported_exchanges": ArbAnalyzer.SUPPORTED_EXCHANGES
    })


# 3. API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±—Ä–∞–±–æ—Ç–∫–∞ POST –∏–∑ Web App)
@app.post("/api/save_settings", response_class=JSONResponse)
async def api_save_user_settings(data: SettingsData):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ Web App, –≤ –ë–î."""
    try:
        settings_dict = {
            "exchanges": data.exchanges,
            "blacklist": data.blacklist[0].split() if data.blacklist and data.blacklist[0] else [],
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–æ–Ω–µ—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
            "min_spread": data.min_spread,
            "min_funding_spread": data.min_funding_spread,
        }

        save_settings(data.user_id, settings_dict)
        return {"status": "success", "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!"}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")


# ==================== WEBHOOK & STARTUP ====================

@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram."""
    # ... –í–∞—à –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ secret_token

    data = await request.json()
    update = Update.de_json(data, TELE_BOT_APP.bot)
    await TELE_BOT_APP.process_update(update)

    return {"ok": True}


@app.on_event("startup")
async def startup_event():
    global arb_thread

    # 1. –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    create_db()

    # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ê—Ä–±–∏—Ç—Ä–∞–∂–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
    # (FastAPI –∞—Å–∏–Ω—Ö—Ä–æ–Ω–µ–Ω, –Ω–æ CCXT —Å–∏–Ω—Ö—Ä–æ–Ω–µ–Ω, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º threading)
    arb_thread = ArbAnalyzer(update_interval=FETCH_INTERVAL)
    arb_thread.start()
    logging.info("–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω.")

    # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    await TELE_BOT_APP.initialize()
    TELE_BOT_APP.add_handler(CommandHandler("start", cmd_start))
    TELE_BOT_APP.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), echo))  # –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞

    # 4. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Webhook (–∫–∞–∫ –≤ –≤–∞—à–µ–º –∫–æ–¥–µ)
    await TELE_BOT_APP.bot.set_webhook(url=WEBHOOK_URL)
    logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {WEBHOOK_URL}")


@app.on_event("shutdown")
async def shutdown_event():
    # –£–¥–∞–ª–µ–Ω–∏–µ Webhook –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
    await TELE_BOT_APP.bot.delete_webhook()
    logging.info("Webhook —É–¥–∞–ª–µ–Ω.")

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ (–¥–ª—è —á–∏—Å—Ç–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
    if arb_thread:
        arb_thread.stop()
        arb_thread.join()
        logging.info("–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")