import os
import threading
import time
import logging
from typing import Dict, Any, List, Optional
from datetime import datetime
import ccxt
import requests
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.templating import Jinja2Templates
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, Update, Message
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, ExtBot
from pydantic import BaseModel
import asyncio

# ==================== –ò–ú–ü–û–†–¢ –ù–û–í–´–• –ú–û–î–£–õ–ï–ô ====================
# ! –í–ê–ñ–ù–û: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∏ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
from arb_analyzer import ArbAnalyzer, GLOBAL_ARB_DATA
from database import get_settings, create_db, save_settings

# =============================================================

# ================= CONFIG =================
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "")
PUBLIC_URL = os.environ.get("PUBLIC_URL", "")

if not TELEGRAM_BOT_TOKEN or not PUBLIC_URL:
    raise RuntimeError("‚ùå Set TELEGRAM_BOT_TOKEN and PUBLIC_URL environment variables!")

WEBHOOK_PATH = f"/webhook/{TELEGRAM_BOT_TOKEN}"
WEBHOOK_URL = PUBLIC_URL.rstrip("/") + WEBHOOK_PATH
WEBAPP_BASE_URL = PUBLIC_URL.rstrip("/") + "/webapp"
FETCH_INTERVAL = 3.0
PORT = int(os.environ.get('PORT', 8080))

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# ==================== FASTAPI & TELEGRAM INIT ====================
app = FastAPI()


class CustomBot(ExtBot):
    pass


TELE_BOT_APP = (
    Application.builder()
    .token(TELEGRAM_BOT_TOKEN)
    .updater(None)
    .bot(CustomBot)  # –ò–°–ü–†–ê–í–õ–ï–ù–û
    .build()
)

templates = Jinja2Templates(directory=".")

arb_thread: Optional[ArbAnalyzer] = None


# ==================== –°–•–ï–ú–´ –î–ê–ù–ù–´–• –î–õ–Ø API ====================
class SettingsData(BaseModel):
    user_id: int
    exchanges: List[str]
    blacklist: List[str]
    min_spread: float
    min_funding_spread: float


# ==================== TELEGRAM HANDLERS ====================

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.from_user:
        return

    user_id = update.message.from_user.id

    # URL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Web App (miniapp.html)
    webapp_url = f"{WEBAPP_BASE_URL}?user_id={user_id}"

    keyboard = [
        [InlineKeyboardButton("üìä –û—Ç–∫—Ä—ã—Ç—å –ê—Ä–±–∏—Ç—Ä–∞–∂ –†–∞–¥–∞—Ä", web_app=WebAppInfo(url=webapp_url))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π —Ä–∞–¥–∞—Ä.",
        reply_markup=reply_markup
    )


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message:
        await update.message.reply_text(update.message.text)


# ==================== WEB APP (HTML) ENDPOINTS ====================

@app.get("/webapp", response_class=HTMLResponse)
async def webapp_html(request: Request):
    return templates.TemplateResponse("miniapp.html", {"request": request})


# ==================== API ENDPOINTS (–î–ª—è JS –≤ Web App) ====================

# 1. API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —Å–≤—è–∑–æ–∫
@app.get("/api/get_arb_data", response_class=JSONResponse)
async def api_get_arb_data(user_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–≤—è–∑–æ–∫ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    settings = get_settings(user_id)
    all_spreads = GLOBAL_ARB_DATA.get('latest_spreads', [])

    filtered_spreads = []

    for s in all_spreads:
        # –§–∏–ª—å—Ç—Ä –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É —Å–ø—Ä–µ–¥—É
        if s['net_spread'] * 100 < settings['min_spread']:
            continue

        # –§–∏–ª—å—Ç—Ä –ø–æ —á–µ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É –º–æ–Ω–µ—Ç
        if s['coin'] in settings['blacklist']:
            continue

        # –§–∏–ª—å—Ç—Ä –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –±–∏—Ä–∂–∞–º (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π, –Ω—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω)
        is_exchange_ok = not settings['exchanges'] or \
                         s['long_exchange'] in settings['exchanges'] or \
                         s['short_exchange'] in settings['exchanges']

        if is_exchange_ok:
            filtered_spreads.append(s)

    return {"spreads": filtered_spreads}


# 2. API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.get("/api/get_user_settings/{user_id}", response_class=JSONResponse)
async def api_get_user_settings(user_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –≤ Web App."""
    settings = get_settings(user_id)
    return JSONResponse({
        "settings": settings,
        "supported_exchanges": ArbAnalyzer.SUPPORTED_EXCHANGES
    })


# 3. API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±—Ä–∞–±–æ—Ç–∫–∞ POST –∏–∑ Web App)
@app.post("/api/save_settings", response_class=JSONResponse)
async def api_save_user_settings(data: SettingsData):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ Web App, –≤ –ë–î."""
    try:
        settings_dict = {
            "exchanges": data.exchanges,
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–æ–Ω–µ—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
            "blacklist": data.blacklist[0].upper().split() if data.blacklist and data.blacklist[0] else [],
            "min_spread": data.min_spread,
            "min_funding_spread": data.min_funding_spread,
        }

        save_settings(data.user_id, settings_dict)
        return {"status": "success", "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!"}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")


# ==================== WEBHOOK & STARTUP ====================

@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, TELE_BOT_APP.bot)
    await TELE_BOT_APP.process_update(update)

    return {"ok": True}


@app.on_event("startup")
async def startup_event():
    global arb_thread

    create_db()

    arb_thread = ArbAnalyzer(update_interval=FETCH_INTERVAL)
    arb_thread.start()
    logging.info("–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω.")

    await TELE_BOT_APP.initialize()
    TELE_BOT_APP.add_handler(CommandHandler("start", cmd_start))
    TELE_BOT_APP.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), echo))

    await TELE_BOT_APP.bot.set_webhook(url=WEBHOOK_URL)
    logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {WEBHOOK_URL}")


@app.on_event("shutdown")
async def shutdown_event():
    await TELE_BOT_APP.bot.delete_webhook()
    logging.info("Webhook —É–¥–∞–ª–µ–Ω.")

    if arb_thread:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        arb_thread._stop_event.set()
        arb_thread.join()
        logging.info("–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")